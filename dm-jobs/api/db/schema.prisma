datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model RW_DataMigration {
  version    String   @id
  name       String
  startedAt  DateTime
  finishedAt DateTime
}

model UserInformation {
  id         Int      @id @default(autoincrement())
  userAuthId String
  firstName  String
  lastName   String
  createdAt  DateTime @default(now())

  @@unique([userAuthId])
}

model UserAddress {
  id         Int    @id @default(autoincrement())
  town       String
  street     String
  number     String
  zipCode    String
  userAuthId String
}

model Job {
  id                           Int           @id @default(autoincrement())
  createdAt                    DateTime      @default(now())
  title                        String
  description                  String?
  price                        Float
  longitude                    String
  latitude                     String
  threeWords                   String
  status                       JobState
  timeout                      DateTime?
  additionalAddressInformation String?
  categories                   JobCategory[]
  tags                         JobTag[]
  pickedBy                     JobUserPick?   @relation(fields: [jobUserPickId], references: [id])
  jobUserPickId                Int?
}

// who created the job?
model JobUser {
  id     Int    @id @default(autoincrement())
  jobId  Int
  userId String

  @@unique([jobId])
  @@unique([jobId, userId])
}

// who picked the job?
model JobUserPick {
  id     Int    @id @default(autoincrement())
  jobId  Int
  userId String
  Job Job[]

  @@unique([jobId])
  @@unique([jobId, userId])
}

model User {
  id          Int         @id @default(autoincrement())
  userId      String
  accountType AccountType @default(execute)
  rating      Int @default(0)

  @@unique([userId])
  @@unique([userId, accountType])
}

enum AccountType {
  provide
  execute
}

enum JobCategory {
  all
  buying
  pawn
  delivery
  lawn
  snow
}

enum JobTag {
  car
  extra_tip
}

enum JobState {
  pending
  in_progress
  finished
  canceled
}
